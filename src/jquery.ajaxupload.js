// Generated by CoffeeScript 1.6.1
(function() {
  var Uploader,
    _this = this;

  Uploader = (function() {

    function Uploader(container, opts) {
      var browse, choose_file, choose_section, filefield, list, nodes,
        _this = this;
      this.container = container;
      this.opts = opts;
      this.upload = function(file, li) {
        return Uploader.prototype.upload.apply(_this, arguments);
      };
      this.setPreview = function(file, preview) {
        return Uploader.prototype.setPreview.apply(_this, arguments);
      };
      this.handleFileSelection = function(evt) {
        return Uploader.prototype.handleFileSelection.apply(_this, arguments);
      };
      this.handleDragOver = function(evt) {
        return Uploader.prototype.handleDragOver.apply(_this, arguments);
      };
      browse = "<a href='javascript:void(0);' class='browse'>" + this.opts.browse_text + "</a>";
      filefield = "<input type='file' hidden multiple=" + this.opts.multiple + "></input>";
      list = "<ul class='list'></ul>";
      choose_file = (this.opts.drag_and_drop ? "<div class='droparea'>" + browse + "</div>" : browse);
      choose_section = "" + choose_file + filefield + list;
      this.container.addClass("upload");
      this.container.append(choose_section);
      nodes = this.container.children();
      this.browse = this.container.find(".browse");
      this.filefield = this.container.find("input[type=file]");
      this.list = this.container.find("ul");
      if (this.opts.drag_and_drop) {
        this.droparea = this.container.find(".droparea");
        this.droparea.bind("dragover", this.handleDragOver);
        this.droparea.bind("drop", this.handleFileSelection);
      }
      this.browse.bind("click", function() {
        return _this.filefield.click();
      });
      this.filefield.bind("change", this.handleFileSelection);
      $(".list").on("click", ".delete-link", function(evt) {
        var delete_link;
        evt.preventDefault();
        delete_link = $(evt.target);
        return $.ajax({
          url: delete_link.data("path"),
          type: "DELETE",
          success: function(data) {
            return delete_link.closest("li").remove();
          },
          error: function(data) {
            return console.log("error");
          }
        });
      });
    }

    Uploader.prototype.handleDragOver = function(evt) {
      evt.stopPropagation();
      evt.preventDefault();
      return evt.originalEvent.dataTransfer.dropEffect = "copy";
    };

    Uploader.prototype.handleFileSelection = function(evt) {
      var files,
        _this = this;
      evt.stopPropagation();
      evt.preventDefault();
      files = evt.target.files || evt.originalEvent.dataTransfer.files;
      return $(files).each(function(i, file) {
        var item, preview;
        item = "<li><div class='progressbar'><div class='progress' style='width:0%;'></div></div>\n<div class='fileinfo'><span class='preview'></span><span class='filename'>" + file.name + "</span>\n<span>" + (_this.toSize(file.size)) + "</span>&nbsp;&mdash;&nbsp;</div></div></li>";
        _this.list.append(item);
        preview = $(".preview").last();
        if (_this.opts.preview) {
          _this.setPreview(file, preview);
        }
        return _this.upload(file, _this.list.children().last());
      });
    };

    Uploader.prototype.setPreview = function(file, preview) {
      var reader;
      if (!file.type.match("image.*")) {
        return;
      }
      reader = new FileReader();
      reader.onload = function(evt) {
        return preview.html("<img src='" + evt.target.result + "'></img>");
      };
      return reader.readAsDataURL(file);
    };

    Uploader.prototype.toSize = function(size) {
      var unit, units;
      units = ["KB", "MB", "GB"];
      unit = "BYTES";
      while (size > 1000) {
        size = size / 1000.0;
        unit = units.shift();
      }
      size = Math.round(size);
      return size + " " + unit;
    };

    Uploader.prototype.upload = function(file, li) {
      var fd, progress, xhr,
        _this = this;
      xhr = new XMLHttpRequest();
      fd = new FormData();
      progress = li.find(".progress");
      fd.append("filename", escape(file.name));
      fd.append("size", file.size);
      fd.append("file", file);
      xhr.open("POST", this.opts.upload_path, true);
      xhr.onload = function() {
        if (xhr.status === 200) {
          return _this.processResponse(xhr.responseText, li);
        } else {
          return console.log("failed " + xhr.status);
        }
      };
      xhr.upload.onprogress = function(e) {
        if (e.lengthComputable) {
          return progress.css("width", (e.loaded / e.total * 100) + "%");
        }
      };
      return xhr.send(fd);
    };

    Uploader.prototype.processResponse = function(response_text, li) {
      var delete_link, response;
      response = JSON.parse(response_text);
      if (response.delete_path) {
        delete_link = "<a id='" + response.id + "' class='delete-link' data-path='" + response.delete_path + "' href='javascript:void(0);' >delete</a>";
        li.find(".fileinfo").append(delete_link);
      }
      return this.opts.callback(response);
    };

    return Uploader;

  })();

  $.fn.ajaxUpload = function(options) {
    options = $.extend({}, $.fn.ajaxUpload.default_options, options);
    return new Uploader(this, options);
  };

  $.fn.ajaxUpload.default_options = {
    upload_path: "/",
    browse_text: "browse",
    drag_and_drop: false,
    multiple: true,
    preview: false,
    callback: function(data) {
      return console.log("no callbacks");
    }
  };

}).call(this);
