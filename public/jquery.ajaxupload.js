// Generated by CoffeeScript 1.6.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  (function($) {
    var Uploader;
    Uploader = (function() {
      function Uploader(container, opts) {
        var browse, choose_file, choose_section, filefield, list, nodes,
          _this = this;
        this.container = container;
        this.opts = opts;
        this.upload = __bind(this.upload, this);
        this.handleFileSelection = __bind(this.handleFileSelection, this);
        this.handleDragOver = __bind(this.handleDragOver, this);
        browse = "<a href='javascript:void(0);' class='" + this.opts.browse_class + "'>" + this.opts.browse_text + "</a>";
        filefield = "<input type='file' hidden multiple=" + this.opts.multiple + "></input>";
        list = "<ul class='" + this.opts.list_class + "'></ul>";
        choose_file = browse;
        if (this.opts.drag_and_drop) {
          choose_file = "<div class='droparea'>" + choose_file + "</div>";
        }
        choose_section = "" + choose_file + filefield + list;
        this.container.addClass("upload");
        this.container.append(choose_section);
        nodes = this.container.children();
        this.browse = this.container.find(".browse");
        this.filefield = this.container.find("input[type=file]");
        this.list = this.container.find("ul");
        if (this.opts.drag_and_drop) {
          this.droparea = this.container.find(".droparea");
          this.droparea.bind("dragover", this.handleDragOver);
          this.droparea.bind("drop", this.handleFileSelection);
        }
        this.browse.bind("click", function() {
          return _this.filefield.click();
        });
        this.filefield.bind("change", this.handleFileSelection);
        $(".list").on("click", ".delete-link", function(evt) {
          var delete_link;
          evt.preventDefault();
          delete_link = $(evt.target);
          return $.ajax({
            url: delete_link.data("path"),
            type: "DELETE",
            success: function(data) {
              return delete_link.closest("li").remove();
            },
            error: function(data) {
              return console.log("error");
            }
          });
        });
      }

      Uploader.prototype.handleDragOver = function(evt) {
        evt.stopPropagation();
        return evt.preventDefault();
      };

      Uploader.prototype.handleFileSelection = function(evt) {
        var files,
          _this = this;
        evt.stopPropagation();
        evt.preventDefault();
        files = evt.target.files;
        return $(files).each(function(i, file) {
          var item;
          item = "<li><div class='progressbar'><div class='progress' style='width:0%;'></div></div>\n<div class='filemeta'><div class='filename'>" + file.name + "</div>\n<div class='fileinfo'><span>" + (_this.toSize(file.size)) + "</span>&nbsp;&mdash;&nbsp;</div></div></div></li>";
          _this.list.append(item);
          return _this.upload(file, _this.list.children().last());
        });
      };

      Uploader.prototype.toSize = function(size) {
        var unit, units;
        units = ["KB", "MB", "GB"];
        unit = "BYTES";
        while (size > 1000) {
          size = size / 1000.0;
          unit = units.shift();
        }
        size = Math.round(size);
        return size + " " + unit;
      };

      Uploader.prototype.upload = function(file, li) {
        var fd, progress, xhr,
          _this = this;
        xhr = new XMLHttpRequest();
        fd = new FormData();
        progress = li.find(".progress");
        fd.append("filename", escape(file.name));
        fd.append("size", file.size);
        fd.append("file", file);
        xhr.open("POST", this.opts.upload_path, true);
        xhr.onload = function() {
          if (xhr.status === 200) {
            return _this.processResponse(xhr.responseText, li);
          } else {
            return console.log("failed " + xhr.status);
          }
        };
        xhr.upload.onprogress = function(e) {
          if (e.lengthComputable) {
            return progress.css("width", (e.loaded / e.total * 100) + "%");
          }
        };
        return xhr.send(fd);
      };

      Uploader.prototype.processResponse = function(response_text, li) {
        var delete_link, response;
        response = JSON.parse(response_text);
        if (response.delete_path) {
          delete_link = "<a id='" + response.id + "' class='delete-link' data-path='" + response.delete_path + "' href='javascript:void(0);' >delete</a>";
          li.find(".fileinfo").append(delete_link);
        }
        return this.opts.callback(response);
      };

      return Uploader;

    })();
    $.fn.ajaxUpload = function(options) {
      options = $.extend({}, $.fn.ajaxUpload.default_options, options);
      return new Uploader(this, options);
    };
    return $.fn.ajaxUpload.default_options = {
      upload_path: "/",
      browse_text: "browse",
      browse_class: "browse",
      list_class: "list",
      progress_class: "progressbar",
      drag_and_drop: false,
      multiple: true,
      callback: function(data) {
        return console.log("no callbacks");
      }
    };
  })(jQuery);

}).call(this);
